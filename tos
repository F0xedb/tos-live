#!/bin/bash

# TOS is the Tom OS update script. This script manages everything for maintaining and upgrading.
# To understand how to install the software go to https://github.com/F0Xedb/helper-scripts
# Archinstall and dialogarchinstall are scripts that install arch from scratch and also install custom software to more personalise the os
# Once you have installed arch and have cloned the helper-scripts into a $PATH file you will have the tool TOS.
# This tool is a wrapper around arch based tools.
# It can install packages from the repo's and AUR. It also aids with ssh, networking, updating, installing software and more.
# It basically wraps multiple commands into one simple to use command.

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;35m'
ORANGE='\033[1;33m'
NC='\033[0m' # No Color

export SUDO_ASKPASS='$HOME/bin/rofi/askpass'
name=$(basename "$0")
themefile="$HOME/.config/tos/theme"

function help {
    printf "${ORANGE}$name${NC} ${RED}OPTIONS:${NC} (-h|-u|-i|-c|-dl|-lw|-r)|(-iso| -iso -g)|(-m device metric)|(-c <user>@<ip>)|(-cw <SSID>)\n"
    printf " -h | --help \t\t\t\t show this help message\n"
    printf " -u | --update \t\t\t\t update the entire base system, including AUR packages, config scripts and binaries.\n"
    printf " -g \t\t\t\t\t $name -iso -g will install arch onto this sytem with a graphical interface\n"
    printf " -iso \t\t\t\t\t install arch onto this system\n"
    printf " -c | --crypto <user>@<ip>\t\t Setup a crypto key used for ssh access, if a location is specified it will copy the current key to that location\n"
    printf " -m | --metric <device> <value>\t\t change the metric of a specified network device\n"
    printf " -dl | --device-list \t\t\t list all devices of a network with there ip and changemetric\n"
    printf " -r | --restart-network \t\t restart the network stack\n"
    printf " -cw | --connect-wifi <SSID> \t\t Connect to a wifi address\n"
    printf " -lw | --list-wifi \t\t\t List all wifi devices\n"
    printf " -rs | --repair-system \t\t\t Perform a basic set of repair instruction. In order to fix a potentionally broken system\n"
    printf " -t | --theme <img>\t\t\t change the desktop theme to match a image color scheme\n"
    printf " -ta | --theme-add <img>\t\t Add a theme to the randomize theme database\n"
    printf " -td | --theme-delete <img>\t\t Remove a theme to the randomize theme database\n"
    printf " -tr | --theme-random <on|off>\t\t Enable or disable theme randomization\n"
    printf " -tl | --theme-list \t\t\t List all themes currently sorted in the database\n"
    printf " -tt | --theme-time <seconds>|<d-h-m-s>  Change the timer when to change a theme in seconds or the format <days>d-<hours>h-<minutes>m-<seconds>s\n"
    printf " -bl | --bluetooth-list ?scan \t\t List all bluetooth devices and general information. If scan is provided it fill perform a scan instead\n"
    printf " -b | --bluetooth <on|off> \t\t Turn bluetooth on or off\n"
    printf " -bc | --bluetooth-connect <device> \t Connect to a bluetooth device\n"
    printf " -bd | --bluetooth-disconnect <device> \t Disconnect from a bluetooth device\n"
    printf " -bp | --bluetooth-pair <device> \t Pair a bluetooth device\n"
    printf " -bf | --bluetooth-full\t\t\t Enter full bluetooth cli mode\n"
    printf " -v | --volume\t\t\t\t Get information about the current speaker/volume setup\n"
    printf " -vc | --volume-change\t\t\t Change the volume in percentage\n"
    printf " -vs | --volume-set\t\t\t Set the volume to a certain percentage\n"
    printf " -vt | --volume-toggle\t\t\t Toggle the current volume playback\n"
    printf " -s | --screen\t\t\t\t Get information about your screen config\n"
    printf " -sd | --screen-duplicate <in> <out>\t Duplicate screen from in to out\n"
    printf " -st | --screen-toggle <on|off>\t\t Turn a screen on or off\n"
    printf " -sr | --screen-reset <screen>\t\t Reset a screen to its original state\n"
    printf " -sres | --screen-resolution <XxY>\t Change resolution eg 1920x1080\n"
    printf " -srate | --screen-refresh-rate <num>\t Change the refresh rate\n"
    
    printf "\n\n${ORANGE}USAGE:${NC}\n"
    printf "$name -u \t\t\t\t\t This will update your system\n"
    printf "$name -Syu spectacle \t\t\t This will install the program called spectacle\n"
    printf "$name -iso \t\t\t\t This will install a fresh copy of arch linux on your system. ${RED}Must be ran as root${NC}\n"
    printf "$name -iso -g\t\t\t\t Same as above but in a graphical environment. ${RED}Must be ran as root${NC}\n"
    printf "$name -c\t\t\t\t\t generate a crypto key based on your prefrences\n"
    printf "$name -c root@1.1.1.1\t\t\t share your public key with user root at ip 1.1.1.1\n"
    printf "$name -m eth0 100\t\t\t\t change the metric of device eth0 to 100\n"
    printf "$name -dl\t\t\t\t\t List all network devices\n"
    printf "$name -r\t\t\t\t\t Restart the network stack\n"
    printf "$name -cw free-wifi\t\t\t Connect to wifi called free-wifi\n"
    printf "$name -lw\t\t\t\t\t List all wifi SSID's\n"
    printf "$name -rs\t\t\t\t\t Perform a system repair ${RED}This opperation will take a long time${NC}\n"
    printf "$name -t ~/Pictures/plant.jpg\t\t change the background to plant.jpg and change the color scheme\n"
    printf "$name -tt 3600\t\t\t\t Change the colorscheme every 3600 seconds (only when $name -tr on is called)\n"
    printf "$name -tt 1d-5h\t\t\t\t Change the colorscheme every day and 5 hours (only when $name -tr on is called)\n"
    printf "$name -tt 1d-2h-3m-4s\t\t\t\t Change the colorscheme every day and 2 hours 3 minutes and 4 s (every 93604 seconds) (only when $name -tr on is called)\n"
    printf "$name -tt 0.5h\t\t\t\t Change the colorscheme every half hour (only when $name -tr on is called)\n"
    printf "$name -b on\t\t\t\t Turn on bluetooth\n"
    printf "$name -bc LE-Bose Tom\t\t\t Connect to the device called LE-Bose Tom\n"
    printf "$name -bc 28:11:A5:38:D2:92\t\t Connect to the device by its mac address\n"
    printf "$name -bd LE-Bose Tom\t\t\t Disconnect to the device called LE-Bose Tom\n"
    printf "$name -bl \t\t\t\t List all bluetooth devices known\n"
    printf "$name -bl scan\t\t\t\t List all bluetooth devices known after performing a scan\n"
    printf "$name -bf\t\t\t\t\t Enter an interactive bluetooth cli\n"
    printf "$name -v\t\t\t\t\t Print info about current volume state\n"
    printf "$name -vc +3\t\t\t\t Change the volume up by 3 percent \n"
    printf "$name -vc -3\t\t\t\t Change the volume down by 3 percent \n"
    printf "$name -vs 50\t\t\t\t Set the volume to 50 percent \n"
    printf "$name -vt\t\t\t\t\t Toggle the speaker on or off\n"
    printf "$name -s\t\t\t\t\t Get information about the current screen config\n"
    printf "$name -sd eDP1 HDMI1\t\t\t Duplicate the first screen to the second screen\n"
    printf "$name -st eDP1 off\t\t\t Turn eDP1 off\n"
    printf "$name -sr eDP1\t\t\t\t Reset eDP1 to its original state\n"
    printf "$name -sres eDP1 1920x1080\t\t Set the resoltion of screen eDP1 to 1920 pixel by 1080 pixels \n"
    printf "$name -srate eDP1 60\t\t\t Set the refresh rate of eDP1 to 60 Hz\n"

}

function installyay {
    cd
    git clone https://aur/archlinux.org/yay.git
    cd yay
    makepkg -si
    cd
    rm -rf yay
}

function update {
    printf "${GREEN} Checking all packages and repo's${NC}\n"
    if [[ "$(which yay)" != "/usr/bin/yay" ]]; then
        installyay
    fi


    
    yay -Syu
    
    if [[ "$(which git)" != "/usr/bin/git" ]]; then
        yay -Syu git
    fi

    if [[ "$(which wal)" != "/usr/bin/wal" ]]; then
        yay -Syu python-pywal
    fi
    
    if [[ ! -d ~/.oh-my-zsh ]]; then
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
        git clone https://github.com/F0xedb/zsh-load.git ~/.oh-my-zsh/load
    fi

    if [[ ! -d ~/bin ]]; then
        git clone https://github.com/F0xedb/helper-scripts.git ~/bin 
    fi


    if [[ ! -f ~/.config/emoji ]]; then
        git clone https://github.com/F0xedb/dotfiles.git ~/.config
    fi

    if [[ ! -d ~/Pictures ]]; then
        mkdir ~/Pictures
        git clone https://github.com/F0xedb/Pictures.git ~/Pictures
    fi

    if [[ "$(which st)" != "/usr/local/bin/st" ]]; then
        cd /tmp
        git clone https://github.com/F0xedb/sucklessterminal.git
        cd sucklessterminal && make && sudo make install       
    fi

    ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"
    if [[ ! -f "$ZSH_CUSTOM/themes/spaceship.zsh-theme" ]]; then
           git clone https://github.com/denysdovhan/spaceship-prompt.git "$ZSH_CUSTOM/themes/spaceship-prompt"
          ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"
    fi

    #Finding all firefox profiles and loading in the custom css (it must be enabled in firefox)
    for profile in ~/.mozilla/firefox/*.dev-edition-default; do
            cd $profile
            cp -r ~/.config/.mozilla/firefox/profile/ $profile
            echo $profile
    done

    printf "${RED}If your repo's contain uncommited changes pleas commit them\n git add . && git commit -m \"Data about change\"${NC}\n"
    
    cd ~/bin && git pull origin master
    cd ~/.config && git pull origin master
    cd ~/Pictures && git pull origin master
    cd ~/.oh-my-zsh/load && git pull origin master
    cd

    tospath="$HOME/.oh-my-zsh/custom/plugins/zsh-completions/src/"
    if [[ ! -f "$tospath"_tos ]]; then
            curl https://raw.githubusercontent.com/F0xedb/tos-live/master/_tos -o "$tospath"_tos
    fi
    
    if [[ "$(which chafa)" != "/usr/bin/chafa" ]]; then
        yay -Syu chafa
    fi

    if [[ "$(which xdotool)" != "/usr/bin/xdotool" ]]; then
        yay -Syu xdotool
    fi
    
    if [[ "$(which neofetch)" != "/usr/bin/neofetch" ]]; then
        yay -Syu neofetch
    fi
}

function installarch {
    printf  "${RED}Installing arch${NC}\n"
    if [[ ! -f archinstall ]]; then
        curl https://raw.githubusercontent.com/F0xedb/helper-scripts/master/archinstall -o archinstall
        chmod +x archinstall
    fi
    ./archinstall 
}

function installarchdialog {
    printf "${RED}Installing arch via a dialog${NC}\n"
    if [[ ! -f dialogarchinstall ]]; then
        curl https://raw.githubusercontent.com/F0xedb/helper-scripts/master/dialogarchinstall -o dialogarchinstall
        chmod +x dialogarchinstall
    fi
    ./dialogarchinstall 
}

function changemetric {
        if [ "$(id -u)" == "0" ]; then

            current=$(ip route | grep -E "^default .* $1")
            new=$(printf "$current" | sed "s/metric [0-9]*/metric /")"$2"
            ip route del $current
            ip route add $new
        else
                printf "${RED}Only the root user can change the metric${NC}\n"
        fi
}

function listdevices {
    devices=$(ip link show up | awk '$1 ~ /[0-9]*:.*/{printf $2}' | tr ':' ' ')
    for device in $devices; do
            printf "$device $(ip addr show dev $device | awk '$1 ~ /inet|inet6/{printf $1": "$2" " }') Route:  $(ip route show dev $device | head -n1)\n\n"
    done
}

function theme {
    if [[ "$(which wal)" != "/usr/bin/wal" ]]; then
        yay -Syu python-pywal
    fi
    wal -i $1
}

function theme-check {
    if [[ ! -f $themefile ]]; then
        mkdir -p $HOME/.config/tos
        touch $themefile
        printf "off\ntime=1000\n" >> $themefile
    else
        sed -i -r '/^\s*$/d' $themefile
    fi
    # TODO: change this into a cronjob or real daemon
    # TODO: current check to see if a daemon exists always returns true
    process=$(ps -aux)
    if [[ "$(echo $process | grep 'tos --theme-daemon')" != *'tos --theme-daemon'* ]]; then
       echo "No daemon found. Launching a new instance"
       nohup tos --theme-daemon &> /dev/null & # launch theme daemon when it isn't running
    fi
}

function theme-add {
        echo $(readlink -f $1) >> $themefile
}

function theme-delete {
        file=$(readlink -f $1)
        sed -i 's;'$file';;g' $themefile
        sed -i -r '/^\s*$/d' $themefile
}

function theme-random {
        sed -i 's/^on$/'$1'/' $themefile
        sed -i 's/^off$/'$1'/' $themefile
}

function screen-duplicate  {
    primary=$1
    secondary=$2
    sizePrimary=$(xrandr | awk -v monitor="^$primary connected" '/connected/ {p = 0}$0 ~ monitor {p = 1}p' | head -n2 | tail -n1 | awk '{print $1}')

    sizeSecondary=$(xrandr | awk -v monitor="^$secondary connected" '/connected/ {p = 0}$0 ~ monitor {p = 1} p' | head -n2 | tail -n1 | awk '{print $1}')
    echo "primary monitor - $primary: $sizePrimary"
    echo "secondary monitor - $secondary: $sizeSecondary"
    xrandr --output "$primary" --rate 60 --mode "$sizePrimary" --fb "$sizePrimary" --panning "$sizePrimary" --output "$secondary" --mode "$sizeSecondary" --same-as "$primary"
    
}

function gettime {
    if [[ "$1" == "" ]]; then
            echo -e -n "0"
            return
    fi
    echo -e -n "$1"
}

# When updating the screen we should reload all components so that the can adjust to the new display specs
function screen-reload {
    killall polybar # should restart with the keepalive script
    nohup polybar main &> /dev/null &
    nohup polybar workspaces &> /dev/null &
    wal -R

}

case "$1" in
    ""|"-h"|"--help")
        help
    ;;
    "-u"|"--update")
        update
    ;;
    "-S"*|"-R"*|"-Q"*)
        if [ "$(id -u)" != "0" ]; then
            if [[ "$(which yay)" != "/usr/bin/yay" ]]; then
            installyay
            fi
            yay "${@:1}"
        else
            printf "${RED} Package management as root is very dangerous${NC}\n"
        fi

    ;;
    "-iso")
        if [ "$(id -u)" == "0" ]; then
            if [ "$2" == "-g" ]; then
                installarchdialog
            else
                installarch
            fi
        else
            printf "${RED} Only root user can install TOS${NC}\n"
        fi    
    ;;
    "-c"|"--crypto")
        if [ "$2" == "" ]; then
               ssh-keygen
        else
               ssh-copy-id $2
        fi 
    ;;
    "-m"|"--metric")
            if [[ "$2" == "" || "$3" == "" ]]; then
                    printf "${RED}Can't change metric of specified device because you didn't specifie the device or metric value${NC}"
            else
                    changemetric $2 $3
            fi
    ;;
    "-dl"|"--device-list")
        listdevices
    ;;
    "-r"|"--restart-network")
            systemctl restart NetworkManager
    ;;
    "-cw"|"--connect-wifi")
        if [[ "$2" != "" ]]; then
            nmcli dev wifi connect -a "${@:2}"
        fi

    ;;
    "-lw"|"--list-wifi")
        nmcli d wifi list
    ;;
    "-rs"|"--repair-system")
        yay -Sc # delete the package managers cache for broken or unused apps
        rankmirror # use the best/most up to date mirror
        yay -Syyu # force update the repo databases
        tos -u # update all tos unique tools and more
    ;;
    "-t"|"--theme")
        theme-check
        theme $2
    ;;    
    "-ta"|"--theme-add")
        theme-check
        theme-add $2
    ;;    
    "-td"|"--theme-delete")
        theme-check
        theme-delete $2
    ;;    
    "-tr"|"--theme-random")
        theme-check
        theme-random $2
    ;;    
    "--theme-daemon")
        while true; do
                file=$(shuf -n 1 $themefile)
                if [[ "$(cat $themefile | head -n1)" == "on" ]]; then
                    while [ ! -f $file ] || [ "$file" == "" ]; do
                        file=$(shuf -n 1 $themefile)
                    done
                    echo $(cat $themefile | head -n1)
                    wal -i $file
                fi
                time=$(cat "$themefile" | head -n2 | tail -n1 | awk -F= '{print $2}')
                sleep "$time"
        done
    ;;    
    "-tl"|"--theme-list")
        theme-check
        cat $themefile | awk '$0 !~ /^off|^on|^\n|time=[0-9]*/{print $0}' | sed -r '/^\s*$/d'
    ;;
    "-tt"|"-theme-time")
        theme-check
        day=$(echo "$2" | sed 's/-/\n/g' | awk '{if($0 ~ /d/){ printf ($0-d)*24*60*60}}')
        hour=$(echo "$2" | sed 's/-/\n/g' | awk '{if($0 ~ /h/){ printf ($0-h)*60*60}}')
        minute=$(echo "$2" | sed 's/-/\n/g' | awk '{if($0 ~ /m/){ printf ($0-m)*60}}')
        second=$(echo "$2" | sed 's/-/\n/g' | awk '{if($0 ~ /s|^[0-9]*$/){ printf ($0-s)}}')
        total=$(($(gettime $day) + $(gettime $hour) + $(gettime $eminute) + $(gettime $second)))
        sed -i 's/^time=[0-9]*/time='$total'/g' $themefile
    ;;
    "-b"|"--bluetooth")
            bluetoothctl power "$2"
    ;;
    "-bl"|"--bluetooth-list")
            if [[ $2 == "scan" ]]; then
                    bluetoothctl scan on &
                    printf "${RED}Press enter if you want to stop scanning${NC}\n"
                    read
                    kill %%
            fi
            bluetooth
            bluetoothctl devices
    ;;
    "-bc"|"--bluetooth-connect")
            bluetoothctl connect "$2"
    ;;
    "-bd"|"--bluetooth-disconnect")
            bluetoothctl disconnect "$2"
    ;;
    "-bp"|"--bluetooth-pair")
            bluetoothctl pairable on
            bluetoothctl pair "$2"
            bluetoothclt pairable off
            bluetoothctl trust "$2"
    ;;
    "-bf|--bluetooth-full")
            bluetoothctl
    ;;
    "-v"|"--volume")
        amixer get Master
    ;;
    "-vc"|"--volume-change")
            num=$(echo -e "$2" | tr '-' ' ' | tr '+' ' ' | sed 's/\s*//g')
            echo $num, $2
            if [[ "$2" == *-* ]]; then
                amixer -q sset Master "$num"%-
            else
                amixer -q sset Master "$num"%+
            fi
    ;;
    "-vs"|"--volume-set")
        amixer -q sset Master "$2"%
    ;;
    "-vt"|"--volume-toggle")
        amixer -q set Master toggle
    ;;
    "-s"|"--screen")
        xrandr
    ;;
    "-sd"|"--screen-duplicate")
        screen-duplicate $2 $3
        screen-reload
    ;;
    "-st"|"--screen-toggle")
        xrandr --output $2 --$3
        screen-reload
    ;;
    "-sr"|"--screen-reset")
        xrandr --output $2 --auto
        screen-reload
    ;;
    "-sres"|"--screen-resolution")
        xrandr --output $2 --mode $3
        screen-reload
    ;;
    "-srate"|"--screen-refresh-rate")
        xrandr --output $2 --rate $3
        screen-reload
    ;;
esac
