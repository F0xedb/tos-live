#!/bin/bash

function begin {

echo "Build and maintained by Tom Meyers"

echo "You are about to install tos using this automated script"

echo "This install script will try to load the tos linux build by Tom"

echo "Its features are LUKS encrypted drives, custom zsh, i3wm and more"

echo "Note: This script assumes that you have a wireless card. If you don't you need to manually get a network connection. If you do you will be promted to connect to a network"

if [[ "$1" == "" ]]; then
    read -r -p "Do you wish to continue? y/n" entry
fi
}

device=$( ls /dev/sd* | grep -E 'sd[a-z]$' | sort | head -n1)
device2=$( ls /dev/nvme?n* | grep -E 'nvme[a-z0-9]*$' | sort | head -n1)

part1="1"
part2="2"
part3="3"

msdos=""

function ask {
    exec 3>&1;
    result=$(dialog --title "TOS Installer" --inputbox "$1" 0 0 "$2" 2>&1 1>&3);
    exec 3>&-;
}

function prmpt {
    dialog --title "TOS Installer" --yesno "$1" 0 0
}

# getdev "Select the device to install" "/dev/sda" "/dev/nvme"
function getdev {
    exec 3>&1;
    first=$(fdisk -l "$2" | grep -e "Disk .[a-zA-Z/]*: [0-9][0-9]*" | awk '{print $3, $4}')
    second=$(fdisk -l "$3" | grep -e "Disk .[a-zA-Z/]*: [0-9][0-9]*" | awk '{print $3, $4}')
    device=$(dialog --title "TOS installer" --menu "$1" 0 0 0 "$2" "$first" "$3" "$second" 2>&1 1>&3);
    
    # the device is an nvme drive
    if [[ "$device" == "$device2" ]]; then
        part1="p1"
        part2="p2"
        part3="p3"
    fi
    
    exec 3>&-;
}

function loadkbd {
    exec 3>&1;
    layout=$(dialog --title "TOS Installer" --backtitle "TOS" --menu "What is your keyboard layout" 0 0 0  $(/usr/bin/ls /usr/share/kbd/keymaps/i386/**/*.map.gz | sed 's:.map.gz::' | xargs -n 1 basename | awk '{print $0, "keyboard"}') 2>&1 1>&3)
    exec 3>&-;
    
    loadkeys $layout

}


function partition {
    prmpt "Setting up disk partition"
    ask "Is your system EFI?" "Yes"
    if [[ "$result" == "Yes" ]]; then
        parted --script "$device" 'mklabel gpt'  
        parted --script "$device" 'mkpart ESP fat32 1MiB 200MiB'  
        parted --script "$device" 'set 1 boot on'  
        parted --script "$device" 'name 1 efi'  
        parted --script "$device" 'mkpart primary 200MiB 800MiB'  
        parted --script "$device" 'name 2 boot'  
        parted --script "$device" 'mkpart primary 800MiB 100%'  
        parted --script "$device" 'set 3 lvm on'  
        parted --script "$device" 'name 3 lvm'  
    else
        parted --script "$device" 'mklabel msdos'  
        parted --script "$device" 'mkpart primary 1MiB 200MiB'  
        parted --script "$device" 'set 1 boot on'  
        parted --script "$device" 'name 1 boot'  
        parted --script "$device" 'mkpart primary 800MiB 100%'  
        parted --script "$device" 'set 2 lvm on'  
        parted --script "$device" 'name 2 lvm'
        msdos="1"  
        part3=$part2
    fi
}

function crypto {
    prmpt "loading in crypto kernel modules"
    modprobe dm-crypt
    modprobe dm-mod

    prmpt "Setting up the LUKS encryption"
    cryptsetup luksFormat -v -s 512 -h sha512 "$device"$part3
    
    prmpt "Opening encrypted drive"
    cryptsetup open "$device"$part3 luks_lvm

    prmpt "Creating volumes"

    pvcreate /dev/mapper/luks_lvm
    vgcreate tos /dev/mapper/luks_lvm
    
    #TODO: If a disk is in the terabytes convert it into Gigs. Currently it won't break anything but this default values will be wrong 
    size=$(fdisk -l "$device" | grep -e "Disk $device: [0-9][0-9]*" | awk '{print
    $3}')

    data=$(fdisk -l "$device" | grep -e "Disk $device: [0-9][0-9]*" | tr ',' ' '| awk '{print $4}')

    if [[ "$data" == "TiB" ]]; then
        size=$(echo $size | awk '{print $0*1000}')
    fi
     
    ask "How big should your home partition be? (in Gigabytes)" "$(echo $size | awk '{print ($0/40)*26}')"
    lvcreate -n home -L "$result"G tos

    sleep 0.5
    
    ask "How big should your root partition be? (in Gigabytes)" "$(echo $size | awk
    '{print ($0/40)*12}')"

    lvcreate -n root -L "$result"G tos

    sleep 0.5

    ask "How big should your swap partition be? (in Gigabytes)" "$(echo $size | awk '{print ($0/80)*1}')"
    
    lvcreate -n swap -L "$result"G -C y tos
}

# This function needs to be called after setting up the logic volumes
function format {

    prmpt "Formatting partitions"
   
    if [[ "$msdos" == "" ]]; then 
        mkfs.fat -F32 "$device"$part1
        mkfs.ext4 "$device"$part2
    else
        mkfs.ext4 "$device"$part1
    fi
    mkfs.ext4 -L root /dev/mapper/tos-root
    mkfs.ext4 -L home /dev/mapper/tos-home
    mkswap /dev/mapper/tos-swap

}

function mounting {
        prmpt "Initiating mounting attempt"
        
        swapon /dev/mapper/tos-swap
        swapon -a
        swapon -s
        mount /dev/mapper/tos-root /mnt
        mkdir -p /mnt/{home,boot}
        if [[ "$msdos" == "" ]]; then
            mount "$device"$part2 /mnt/boot
            mount /dev/mapper/tos-home /mnt/home
            mkdir /mnt/boot/efi
            mount "$device"$part1 /mnt/boot/efi
        else
            mount "$device"$part1 /mnt/boot
            mount /dev/mapper/tos-home /mnt/home
        fi

        prmpt "Verify if the mounting is succesfull"
        lsblk -f
        read -r -p "Press enter to continue"
}

function wifi {
    prmpt "Trying to get network connection in order to complete the next steps"
    if [[ $(ping -c1 1.1.1.1 | grep "0% packet loss") == "" ]]; then
        wifi-menu
    fi
}

function basesystem {
    pacstrap /mnt base base-devel efibootmgr vim dialog xterm grub --noconfirm
    genfstab -U -p /mnt > /mnt/etc/fstab

    #TODO: Don't hardcode this filename. Try to find it 
    cp "$0" /mnt/archinstall
    arch-chroot /mnt /bin/bash archinstall base $part3
}

function tossify-pacman { 
    printf "[tos]\nSigLevel = Optional TrustAll\nServer = https://repo.pbfp.xyz\n" >> /etc/pacman.conf
}

function chrootfunc {
    tossify-pacman
    #TODO instead of specifing the entire HOOKS array only append encrypt and lvm2 to it
    prmpt "Changing mkinitcpio"
    sed -i '/^HOOKS/c\HOOKS=(base udev autodetect modconf block encrypt lvm2 filesystems keyboard fsck)' /etc/mkinitcpio.conf    

    pacman -Syu --noconfirm udev
    pacman -S --noconfirm linux linux-tos

    mkinitcpio -v -p linux

    pacman -S grub --noconfirm
    

    

    sed -i '/^GRUB_CMDLINE_LINUX_DEFAULT=/c\GRUB_CMDLINE_LINUX_DEFAULT="quiet resume=/dev/mapper/tos-swap cryptdevice='$device$1':luks_lvm"' /etc/default/grub
    sed -i 's/^#GRUB_ENABLE_CRYPTODISK=y/GRUB_ENABLE_CRYPTODISK=y/' /etc/default/grub
    sed -i 's/^GRUB_DISTRIBUTOR="Arch"/GRUB_DISTRIBUTOR="TOS"/' /etc/default/grub
    rm -rf /etc/issue /etc/os-release
    echo "TOS Linux" > /etc/issue
    printf 'NAME="Tos Linux"
PRETTY_NAME="Tos Linux"
ID=tos
BUILD_ID=rolling
ANSI_COLOR="0;36"
HOME_URL="https://tos.pbfp.xyz/"
LOGO=toslinux' > /etc/os-release


    if [[ "$msdos" == "" ]]; then
        grub-install --efi-directory /boot/efi --force "$device"
    else
        grub-install --root-directory=/boot "$device"
    fi 
    grub-mkconfig -o /boot/grub/grub.cfg


}

function locale-generator {
   exec 3>&1;
   language=$(dialog --title "TOS Installer" --backtitle "TOS" --menu "What is your language" 0 0 0  $(cat /etc/locale.gen | awk '$0 ~ /^#[a-zA-Z].*/' | sed 's:#::' | tr -d '\n') 2>&1 1>&3)
   exec 3>&-;
   sed -i "s:^#.*$language:$language:" /etc/locale.gen
   locale-gen
   echo "LANG=$language" > /etc/locale.conf
}

function keymap-generator {
    exec 3>&1;
    layout=$(dialog --title "TOS Installer" --backtitle "TOS" --menu "What is your keyboard layout" 0 0 0  $(/usr/bin/ls /usr/share/kbd/keymaps/i386/**/*.map.gz | sed 's:.map.gz::' | xargs -n 1 basename | awk '{print $0, "keyboard"}') 2>&1 1>&3)
    exec 3>&-;
   echo KEYMAP="$layout" > /etc/vconsole.conf
}

function location-generator {
    exec 3>&1;
    continent=$(dialog --title "TOS Installer" --backtitle "TOS" --menu "What is your continent" 0 0 0  $(/usr/bin/ls /usr/share/zoneinfo/ | sed 's:\n::' | awk '{print $0, " Continent"}') 2>&1 1>&3)
    capital=$(dialog --title "TOS Installer" --backtitle "TOS" --menu "What is your Capital" 0 0 0  $(/usr/bin/ls /usr/share/zoneinfo/$continent | sed 's:\n::' | awk '{print $0, " Continent"}') 2>&1 1>&3)
    exec 3>&-;
   ln -sf /usr/share/zoneinfo/"$continent"/"$capital" /etc/localtime 
}


function default {
   timedatectl set-ntp true
   location-generator
   hwclock --systohc

   locale-generator

   keymap-generator

   ask "What is your computer name?" "core"
   echo "$result" > /etc/hostname

   echo -e "127.0.0.1   localhost\n::1      localhost\n127.0.1.1    $result.localdomain  $result" >> /etc/hosts

   prmpt "Setting up root password"
   passwd

}


function user {
    pacman -Syu --noconfirm git sudo base-devel zsh

    echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

    ask "What is your username?" "alpha"
    useradd -m -g users -G audio,lp,optical,storage,video,wheel,games,power -s /bin/zsh "$result"
    passwd "$result"
    su "$result" -c "/archinstall user"
}

function download {
    #installing aur helper
    cd
    git clone https://aur.archlinux.org/yay.git
    cd yay
    yes | makepkg -si
    cd
    rm -rf yay

    #installing zsh packages
    yay -Syu --noconfirm zsh zsh-autosuggestions zsh-syntax-highlighting



    #installing x-server
    yay -Syu --noconfirm xorg-fonts-type1 xorg-server xorg-xbacklight xorg-xclipboard xorg-xinit xorg-xinput xorg-xprop xorg-xrandr xclip

    #installing fonts
    yay -Syu --noconfirm ttf-bitstream-vera ttf-computer-modern-fonts ttf-emojione ttf-fira-code ttf-fira-mono ttf-inconsolata ttf-liberation ttf-linux-libertine ttf-monoid ttf-symbola sdl_ttf siji-git noto-fonts nerd-fonts-complete font-bh-ttf bdf-unifont ttf-dejavu

    # This needs to be installed for polybar-git to work
    yay -Syu --noconfirm jsoncpp

    #installing i3 with graphical programs
    yay -Syu --noconfirm vim bluez ccat compton docker docker-compose dunst feh firefox-developer-edition gimp glances i3lock-next-git lsd neofetch pavucontrol polybar-git pulseaudio python-pip r8152-dkms rofi screen xf86-input-mouse xf86-video-intel visual-studio-code-insiders zathura playerctl nm-connection-editor networkmanager netctl openssh arandr mono alsa-utils bluez-utils chafa xdotool xcursor-human mcmojave-circle-icon-theme-git breeze-gtk python-pywal wget

    sudo pip install dbus-python    
    sudo systemctl enable NetworkManager
    sudo systemctl enable dhcpcd

    # installing st terminal

    git clone https://github.com/F0xedb/sucklessterminal
    cd sucklessterminal
    make && sudo make install
    cd

    git clone https://github.com/F0xedb/i3.git
    cd i3
    autoreconf --force --install
    rm -rf build/
    mkdir -p build && cd build/

    # install dependencies
    yay -Syu --noconfirm xcb-util-keysyms xcb-util-wm libev yajl startup-notification pango perl xcb-util-cursor libxkbcommon-x11 xcb-util-xrm

    # Disabling sanitizers is important for release versions!
    # The prefix and sysconfdir are, obviously, dependent on the distribution.
    ../configure --prefix=/usr --sysconfdir=/etc --disable-sanitizers
    make
    sudo make install

    #enable wayland support
    ask "Do you want to install wayland(newer) or XORG?" "wayland"
    gpu_cmd="$(lspci -mm | awk -F '\\"|\\" \\"|\\(' '/"Display|"3D|"VGA/ {a[$0] = $3 " " $4} END {for(i in a){if(!seen[a[i]]++) print a[i]}}')"

    if [[ "$result" == "wayland" ]]; then
        # Tell NVIDIA users that sway on wayland doesn't play nice with there graphics card. They better stay and use x-server
        # Or they must use the open-source drivers instead of the propriotary drivers
        if [[ "$gpu_cmd" == *NVIDIA* ]]; then
            prmpt "You are using an NVIDIA card. NVIDIA doesn't support wayland and sway."
            prmpt "We are going to install wayland for you anyway (if nvidia ever changes their mind)"
            prmpt "But for now you will still need to use xorg (by typing startx in the terminal)"
        fi
        yay -Syu --noconfirm wayland sway waybar xorg-server-xwayland
    fi


}


function gitclone {
    prmpt "Installing Tom's custom scripts"
    cd
    git clone https://github.com/F0xedb/helper-scripts.git bin
    cd
    rm -rf .config
    git clone https://github.com/F0xedb/dotfiles .config
    sed -i 's;$HOME /home/zeus;$HOME '$HOME';g' ~/.config/i3/config
    sed -i 's;$HOME /home/zeus;$HOME '$HOME';g' ~/.config/sway/config

    #setup firefox
    mkdir -p ~/.mozilla/firefox/tos.default
    cp ~/.config/tos/profiles.ini ~/.mozilla/firefox/profiles.ini
    cp -r ~/.config/tos/tos-firefox/* ~/.mozilla/firefox/tos.default

    rm -rf ~/.oh-my.zsh
    curl https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -o install.sh
    export RUNZSH=no
    export ZSH=$HOME/.oh-my-zsh
    sh install.sh
    rm install.sh
    ln .config/.zshrc ~/.zshrc
    ln .config/.vimrc ~/.vimrc
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

    ln .config/.Xresources ~/.Xresources
    mkdir -p ~/.icons/default
    ln .config/index.theme ~/.icons/default/index.theme
    cd ~/.oh-my-zsh
    git clone https://github.com/F0xedb/zsh-load load
    cd
    rmdir Pictures
    git clone https://github.com/F0xedb/Pictures Pictures
}

function tom {
    prmpt "Executing Tom's custom scripts"
    
    
    git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-completions.git ~/.oh-my-zsh/custom/plugins/zsh-completions
    git clone https://github.com/denysdovhan/spaceship-prompt.git ~/.oh-my-zsh/custom/themes/spaceship-prompt
    ln -s ~/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme ~/.oh-my-zsh/custom/themes/spaceship.zsh-theme

    
    printf "xrdb ~/.Xresources\nexec i3" >> ~/.xinitrc
    
    mkdir -p ~/.vim/colors
    curl https://bitbucket.org/sjl/badwolf/raw/tip/colors/badwolf.vim > ~/.vim/colors/badwolf.vim

    #installing vundle
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

    #Cloning plugin
    git clone https://github.com/ycm-core/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe

    cd ~/.vim/bundle/YouCompleteMe
    python3 install.py --all
}

# only supports intel, nvidia or amd
function gpu {
    gpu_cmd="$(lspci -mm | awk -F '\\"|\\" \\"|\\(' '/"Display|"3D|"VGA/ {a[$0] = $3 " " $4} END {for(i in a){if(!seen[a[i]]++) print a[i]}}')"

    # TODO: Only install nvidia driver if the device is supported
    if [[ "$gpu_cmd" == *NVIDIA* ]]; then
        yay -Syu nvidia
    fi

    # TODO: Only install driver is card is supported otherwise install AMD catalyst
    # TODO: check if gpu_cmd returns AMD or amd?
    if [[ "$gpu_cmd" == *AMD* ]]; then
        yay -Syu mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver 
    fi

    if [[ "$gpu_cmd" == *Intel* ]]; then
        yay -Syu mesa lib32-mesa xf86-video-intel vulkan-intel
    fi
} 

function install-something {
    while true; do
            ask "Do you want to install some software" "yes"
            if [[ "$result" == "yes" ]]; then
                    $HOME/bin/tos i
            else
                    break
            fi
    done
}

function end {
    echo "You now have a complete tos linux install working as advertised."
    echo "To use your computer log in via the terminal"
    echo "After that is complete you can type in startx or sway to start your graphical environment"
    echo "To navigate around look in the dotfiles repo of F0xedb"
    echo "Good luck on your tos linux journey!"
}

begin "$1"

if [[ "$entry" == "y" && "$1" != "base" && "$1" != "user" ]]; then
        echo "You have 5 seconds before we start altering the hard drive"
        echo "If you wish to abort now use CTRL-C otherwise we will start to change the partition table and install a custom Arch Linux install"
        
        sleep 5
        getdev "What device do you want to install tos on?" "$device" "$device2"
        loadkbd
        partition
        crypto
        format
        mounting
        wifi
        basesystem
        
fi

if [[ "$1" == "base" ]]; then
        chrootfunc $2
        
        echo "Base tos Linux is installed. This is the supported server version."
        
        ask "Do you wish to install the full desktop version (Yes/no)" "Yes" 

        if [[ "$result" == "Yes" ]]; then
            default
            user
        fi
fi

if [[ "$1" == "user" ]]; then
    download
    gitclone
    tom
    gpu
    install-something
    end
fi

