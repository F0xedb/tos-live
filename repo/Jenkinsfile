void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/ODEX-TOS/tos-live"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status/repo"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}


// The arch repo build can only happen on arch based devices.
// You should provide a slave that is running arch
node('archlinux') {
  try{
   stage('pull') {
        git "https://github.com/ODEX-TOS/tos-live.git"
    }
    stage('pending') {
        setBuildStatus("Build started", "PENDING");
   }
    // Build our applications and fonts and add them to the local repo
    stage('building tarballs'){
        parallel(
          apps: {
            sh "cd repo && sh build.sh -P"
          },
          PKGBUILDS: {
            sh "cd repo && sh build.sh -B"
          },
          fonts: {
            sh "cd repo && sh build.sh -f"
          }
          )
    }
    // only upload repository if everything exists
    stage('check for missing packages') {
        sh "cd repo && bash check-missing-packages.sh"
    }
    // Push local repo to the server
    stage('upload repository') {
        sh "cd repo && sh upload.sh -y"
    }
    // Generate package list based on the repo
    stage('generate html') {
        sh "sleep 5"
        sh "yay -Syu --noconfirm || sh upload.sh -y"
        sh "cd repo && yay -Syu --noconfirm && sh genpackagelist.sh"
    }
    // Upload package list to remote repo
    stage('upload html') {
        sh "cd repo && sh upload.sh -y"
    }
    stage('Set build success') {
         setBuildStatus("Build succeeded", "SUCCESS");
    }
   } catch(error) {
       setBuildStatus("Build failed", "FAILURE");
  }
}
