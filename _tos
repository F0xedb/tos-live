#compdef _tos tos

_tos_subcommands() {
  local commands; commands=(
    '-iso:Install TOS onto your system'
    '-S:Install a package'
    '-R:Remove a package'
    {-m,--metric}':Change the network metric of a device'
    {-cw,--change-wifi}':Login to a different network based on its SSID'
    {-t,--theme}':Change the system theme and background to an image'
    {-ta,--theme-add}':Add a theme to the random theme generator'
    {-td,--theme-delete}':Delete a theme from the generator'
    {-tr,--theme-random}':Enable or disable random theme generator'
    {-h,--help}":Show help imformation" \
    {-u,--update}":Update the system to the latest version" \
    {-c,--crypto}":Add a ssh key, when a user@ip is specified add current key to that host" \
    {-dl,--device-list}":List all active network devices" \
    {-r,--restart-network}":Restart the network stack" \
    {-lw,--list-wifi}":List all active wifi devices in the area" \
    {-rs,--repair-system}":Perform a system repair (this will take a long time)" \
    {-tl,--theme-list}":List all entries that are present in the theme file" \
    {-tt,--theme-time}":Supply a time in seconds. This timer will call a new random background" \
    {-b,--bluetooth}":Enable or disable bluetooth" \
    {-bc,--bluetooth-connect}": Connect to a bluetooth device" \
    {-bd,--bluetooth-disconnect}": Disconnect from a bluetooth device" \
    {-bp,--bluetooth-pair}": Pair with a bluetooth device" \
    {-bf,--bluetooth-full}": Go into a fully interactive bluetooth cli" \
    {-bl,--bluetooth-list}": List all bluetooth devices" \
    {-v,--volume}": Get information about the current speaker/volume setup" \
    {-vc,--volume-change}": Change the volume in percentage" \
    {-vs,--volume-set}": Set the volume to a certain percentage" \
    {-vt,--volume-toggle}": Toggle the current volume playback" \
    {-s,--screen}": Get information about your screen config" \
    {-sd,--screen-duplicate}": Duplicate screen from in to out" \
    {-st,--screen-toggle}": Turn a screen on or off" \
    {-sr,--screen-reset}": Reset a screen to its original state" \
    {-sres,--screen-resolution}": Change the resolution" \
    {-srate,--screen-refresh-rate}": Change the refresh rate" \
  )
  _describe -t commands 'subcommands' commands "$@"
}

function _tos {
    local context curcontext="$curcontext" state line
    typeset -A opt_args

    local ret=1
    
    _arguments -C \
        '1: :_tos_subcommands' \
        '*::arg:->args' 

    case $line[1] in
        "-iso")
            _tos_install_graphical
            ;;
        "-S"*)
            _tos_S_install
            ;;
        "-R"*)
            _tos_R_remove
            ;;
        "-m"|"--metric")
            _tos_metric
            ;;
        "-cw"|"--change-wifi")
            _tos_wifi_connect
            ;;
        "-t"|"--theme")
            _tos_change_theme
            ;;
        "-ta"|"--theme-add")
            _tos_add_theme
            ;;
        "-td"|"--theme-delete")
            _tos_delete_theme
            ;;
        "-tr"|"--theme-random")
            _tos_random_theme
            ;;
        "-bc"|"--bluetooth-connect")
            _tos_blue_connect
            ;;
        "-bd"|"--bluetooth-disconnect")
            _tos_blue_disconnect
            ;;
        "-bp"|"--bluetooth-pair")
            _tos_blue_pair
            ;;
        "-sd"|"--screen-duplicate")
            _tos_screen_duplicate
            ;;
        "-st"|"--screen-toggle")
            _tos_screen_toggle
            ;;
        "-sr"|"--screen-reset")
            _tos_screen_select
            ;;
        "-sres"|"--screen-resolution")
            _tos_screen_res
            ;;
        "-srate"|"--screen-refresh-rate")
            _tos_screen_refresh_rate
            ;;
    esac
}

function _tos_screen_toggle {
    list=$(xrandr | awk '$1 !~ /Screen|[0-9]*x[0-9]*/ {print $1}')
    _arguments -C\
    "1: :($list)"\
    "2: :(on off)"\

}

function _tos_screen_refresh_rate {
    list=$(xrandr | awk '$1 !~ /Screen|[0-9]*x[0-9]*/ {print $1}')
    local line
    _arguments -C\
    "1: :($list)"\
    "*::arg:->args"
    _tos_find_rate $line[1]
}

function _tos_screen_res {
    list=$(xrandr | awk '$1 !~ /Screen|[0-9]*x[0-9]*/ {print $1}')
    local line
    _arguments -C\
    "1: :($list)"\
    "*::arg:->args"
    _tos_find_res $line[1]
}

function _tos_find_rate {
    list=$(xrandr | awk -v monitor="^"$1" connected" '/connected/ {p = 0}$0 ~ monitor {p = 1}p' | sed 's/^'$1'.*$//g' | awk '{print $2}' | sed 's/*+//g')
    _arguments -C\
    "1: :($list)"\
    "*::arg:->args"
}

function _tos_find_res {

    list=$(xrandr | awk -v monitor="^"$1" connected" '/connected/ {p = 0}$0 ~ monitor {p = 1}p' | sed 's/^'$1'.*$//g' | awk '{print $1}')
    _arguments -C\
    "1: :($list)"\
    "*::arg:->args"
}

function _tos_screen_duplicate {
    list=$(xrandr | awk '$1 !~ /Screen|[0-9]*x[0-9]*/ {print $1}')
    local line
    _arguments -C\
    "1: :($list)"\
    "*::arg:->args"

    _tos_screen_select
}

function _tos_screen_select {
    list=$(xrandr | awk '$1 !~ /Screen|[0-9]*x[0-9]*/ {print $1}')
    _arguments -C\
    "1: :($list)"
}

function _tos_blue_connect {
    _tos_blue_list_available
}

function _tos_blue_disconnect {
    _tos_blue_list_available
}


function _tos_blue_pair {
        _tos_blue_list_available
}

function _tos_blue_list_available {
        list=$(bluetoothctl devices | awk '{print "\""$0"\"" }' |  sed -E 's/Device ([0-9ABCDEF]{2}:)*[0-9ABCDEF]{2} //g')
    _arguments -C\
    "1: :($list)"
}

function _tos_add_theme {
        _arguments -C\
        '*:Images:_files -g "*.jpg|*.png|*.jpeg"'\
}

function _tos_delete_theme {
        list=$(cat ~/.config/tos/theme | awk '$0 !~ /^on|^off/{print $0}')
        _arguments -C\
        "1: :($list)"
}

function _tos_random_theme {
        _arguments -C\
        "1: :(on off)"
}

function _tos_change_theme {
    _arguments -C\
    '*:Images:_files -g "*.jpg|*.png|*.jpeg"'\
}

function _tos_wifi_connect {
   list=$(nmcli d wifi list | awk '$1 !~ /IN-USE|*/{print $0}' | grep -Eo '^.* Infra' | sed 's/Infra//' | awk '{print "\""$0"\""}' | sed -r -e 's/^\"\s+/\"/g' -e 's/\s*\"/\"/g')
   _arguments -C\
   "1: :($list)"
}

function _tos_metric {
    list=$(ip link show up | awk '$1 ~ /[0-9]*:.*/{printf $2}' | tr ':' ' ') 
    _arguments -C \
    "1: :($list)"
}

function _tos_install_graphical {
    _arguments \
    "-g[Install with a gui (Omit if you want a text based installer)]"
}

function _tos_install_package {
    local line
    _arguments -C -s\
    "1: :(-S -R)" \
    "*::arg:->args"

    case $line[1] in
        "-S"*)
            _tos_S_install
            ;;
        "-R"*)
            _tos_R_remove
            ;;
    esac
}

function _tos_S_install {
    _arguments -s \
    "-yu[Sync and update database]"\
    "-yyu[Force download database and sync with remote repo's]"\
    "-y[Sync databases with remote repo]" \
    "-yy[force reload with remote repo]" \
    "-a[Assume targets are from the AUR]" \
    "-b[Alternative database localation]" \
    "-c[Remove old packages from the cache]" \
    "-d[Skip dependency cheks]" \
    "-g[View all members of a package group]" \
    "-h[Display syntax for the fiven operation]" \
    "-i[View package information]" \
    "-l[List all packages in a repo]" \
    "-p[Prind download URI's for each package]" \
    "-q[Show less info about queries and searches]" \
    "-r[Set alternative install root]" \
    "-s[Search package names and descrptions]" \
    "-u[Upgrade all out-of-date packages]" \
    "-v[Be more verbose]" \
    "-w[Download packages only]" \
    "-s[search for a package]"\
}

function _tos_R_remove {
    _arguments -s \
    "-ns[Remove packages with all its dependencies and config files]" \
    "-a[Assume targets are from the AUR]" \
    "-b[Alternate database location]" \
    "-c[Remove all dependent packages]" \
    "-d[Skip dependency checks]" \
    "-h[Display syntaxt for a given operation]" \
    "-n[Remove protected configuration files]" \
    "-p[Only print the targets instead of perfomring the operation]" \
    "-r[Set alternative installation root]" \
    "-s[Remove dependencies not required by other packages]" \
    "-u[Remove unneeded packages]" \
    "-v[Be more verbose]"
}
