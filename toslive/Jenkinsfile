// This jenkinsfile should only be ran on arch based devices
// Make sure your slave or runner is running arch
// The uploading to the remote repository counts that there is a local repository present.

void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/F0xedb/tos-live"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status/iso"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

node('archlinux') {
  try {
     stage('pending') {
          setBuildStatus("Build started", "PENDING");
     }
     stage('pull') { 
          git "https://github.com/F0xedb/tos-live.git"
          sh "cd toslive && ./version_builder.sh"
      }
      // Build tos server edition
      stage('server'){
          try {
              sh "cd toslive && sudo ./start.sh -s && pwd" // run start.sh as a root user since the live iso chroot is a root user
           } catch(error) {
              echo "First build failed, let's retry."
              echo "This probably happend because our repository has been updated"
              retry(2) {
                 sh "cd toslive && sudo ./start.sh -s && pwd"
              }
           }
      }
      // Build tos client edition
      stage('client'){
          try {
              sh "cd toslive && sudo ./start.sh -g && pwd" // run start.sh as a root user since the live iso chroot is a root user
           } catch(error) {
              echo "Second build failed, let's retry."
              echo "This probably happend because our repository has been updated"
              retry(2) {
                 sh "cd toslive && sudo ./start.sh -g && pwd"
              }
           }
      }
      // Build tos server edition with azerty layout
      stage('server azerty'){
           try {
              sh "cd toslive && sudo ./start.sh -s -a && pwd" // run start.sh as a root user since the live iso chroot is a root user
           } catch(error) {
              echo "First build failed, let's retry."
              echo "This probably happend because our repository has been updated"
              retry(2) {
                 sh "cd toslive && sudo ./start.sh -s -a && pwd"
              }
           }    }
      // Build tos client edition with azerty layout
      stage('client azerty'){
          try {
              sh "cd toslive && sudo ./start.sh -g -a && pwd" // run start.sh as a root user since the live iso chroot is a root user
           } catch(error) {
              echo "First build failed, let's retry."
              echo "This probably happend because our repository has been updated"
              retry(2) {
                 sh "cd toslive && sudo ./start.sh -g -a && pwd"
              }
           }
      }
      // Copy local tos builds to local repository
      stage('copy'){
          sh "cd repo && sh build.sh -u"
      }
      // Upload iso's to remote repository
      stage('upload') {
          sh "cd repo && sh upload.sh -y" 
      }
      stage("set success"){
         setBuildStatus("Build succeeded", "SUCCESS");
        }
    }catch(error){
        setBuildStatus("Build failed", "FAILURE");
    }

}
